{"version":3,"sources":["movieCard.js","searchMovie.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","className","key","id","src","poster_path","alt","title","release_date","vote_avarage","overview","SearchMovies","props","useState","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","url","fetch","res","json","data","results","console","error","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","filter","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"4NAEe,SAASA,EAAT,GAA6B,IAATC,EAAQ,EAARA,MAG/B,OACI,yBAAKC,UAAU,OAAOC,IAAKF,EAAMG,IAC7B,yBAAKF,UAAU,cACVG,IAAG,0DAAqDJ,EAAMK,aAC9DC,IAAKN,EAAMO,MAAQ,YAExB,yBAAKN,UAAU,iBAEX,wBAAIA,UAAU,eAAeD,EAAMO,OACnC,2BACI,gDAAsBP,EAAMQ,eAEhC,2BACI,0CAAgBR,EAAMS,eAE1B,uBAAGR,UAAU,cAAcD,EAAMU,YCjBlC,SAASC,EAAaC,GAAM,MAGbC,mBAAS,IAHI,mBAGhCC,EAHgC,KAGzBC,EAHyB,OAKXF,mBAAS,IALE,mBAKhCG,EALgC,KAKxBC,EALwB,KAOjCC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACjBD,EAAEE,iBAEIC,EAHW,kHAGsGR,EAHtG,iDAMKS,MAAMD,GANX,cAMPE,EANO,gBAOOA,EAAIC,OAPX,OAOPC,EAPO,OAQbT,EAAUS,EAAKC,SARF,kDAUbC,QAAQC,MAAR,MAVa,0DAAH,sDAclB,OACI,oCACI,0BAAM5B,UAAU,OAAO6B,SAAUZ,GAC7B,2BAAOjB,UAAU,QAAQ8B,QAAQ,SAAjC,cACA,2BAAO9B,UAAU,QAAQ+B,KAAK,OAAOC,KAAK,QACnCC,YAAY,qBACZC,MAAOrB,EAAOsB,SAAU,SAACjB,GAAD,OAAOJ,EAASI,EAAEkB,OAAOF,UAExD,4BAAQlC,UAAU,SAAS+B,KAAK,UAAhC,WAEJ,yBAAK/B,UAAU,aACVe,EAAOsB,QAAO,SAAAtC,GAAK,OAAIA,EAAMK,eAAakC,KAAI,SAAAvC,GAAK,OAChD,kBAACD,EAAD,CAAWC,MAAOA,SCnBvBwC,MAXf,WACE,OACE,yBAAKvC,UAAU,OAEX,wBAAIA,UAAU,SAAd,gBACA,kBAACU,EAAD,QCCY8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5B,GACLD,QAAQC,MAAMA,EAAM6B,a","file":"static/js/main.89117604.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function MovieCard({movie}) {\r\n\r\n\r\n    return (\r\n        <div className=\"card\" key={movie.id}>\r\n            <img className=\"card--image\"\r\n                 src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\r\n                 alt={movie.title + ' poster'}\r\n            />\r\n            <div className=\"card--content\">\r\n\r\n                <h3 className=\"card--title\">{movie.title}</h3>\r\n                <p>\r\n                    <small>RELEASE DATE: {movie.release_date}</small>\r\n                </p>\r\n                <p>\r\n                    <small>RATING: {movie.vote_avarage}</small>\r\n                </p>\r\n                <p className=\"card--desc\">{movie.overview}</p>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}","import React, {useState} from \"react\";\r\nimport MovieCard from \"./movieCard\";\r\n\r\nexport default function SearchMovies(props){\r\n\r\n    //states- input query, movies\r\n    const [query, setQuery] = useState('');\r\n    //create the state for movies, and update that state appropriate\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    const searchMovies = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=da1cd1f27a80c7ff2ab9febacfdd6835&language=en-US&query=${query}&page=1&include_adult=false`;\r\n\r\n        try {\r\n            const res = await fetch(url);\r\n            const data  = await res.json();\r\n            setMovies(data.results);\r\n        }catch(err){\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form className=\"form\" onSubmit={searchMovies}>\r\n                <label className=\"label\" htmlFor=\"query\">Movie Name</label>\r\n                <input className=\"input\" type=\"text\" name=\"query\"\r\n                       placeholder=\"i.e. Jurassic Park\"\r\n                       value={query} onChange={(e) => setQuery(e.target.value)}\r\n                />\r\n                <button className=\"button\" type=\"submit\">Search</button>\r\n            </form>\r\n            <div className=\"card-list\">\r\n                {movies.filter(movie => movie.poster_path).map(movie => (\r\n                    <MovieCard movie={movie} />\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport './style.css';\r\nimport './test';\r\nimport SearchMovies from \"./searchMovie\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n\r\n        <h1 className=\"title\">Movie Search</h1>\r\n        <SearchMovies/>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './style.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}